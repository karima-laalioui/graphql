enum TypeCompte {
    COURANT
    EPARGNE
}

type Query {
    allComptes: [Compte]
    compteById(id: ID): Compte
    totalSolde: SoldeStats
    comptesByType(type: TypeCompte!): [Compte] # Comptes filtr√©s par type
}

type Compte {
    id: ID
    solde: Float
    dateCreation: String
    type: TypeCompte
}

type Mutation {
    saveCompte(compte: CompteRequest): Compte
    deleteCompte(id: ID!): String # Suppression d'un compte existant
}

input CompteRequest {
    solde: Float
    dateCreation: String
    type: TypeCompte
}

type SoldeStats {
    count: Int    # Nombre total de comptes
    sum: Float    # Somme des soldes
    average: Float # Moyenne des soldes
}

type Transaction {
    id: ID
    montant: Float
    date: String
    description: String
    compte: Compte
}

input TransactionRequest {
    montant: Float
    description: String
}

extend type Query {
    transactionsByCompteId(compteId: ID!): [Transaction] # Retrieve transactions for a specific account
}

extend type Mutation {
    addTransaction(compteId: ID!, request: TransactionRequest!): Transaction # Add a transaction to an account
}